// <auto-generated />
using System;
using CBF.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CBF.Infra.Migrations
{
    [DbContext(typeof(CBFContext))]
    [Migration("20231025141720_initial-database")]
    partial class initialdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CBF.Domain.Entities.Clube", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime>("DtFundacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Clube", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.ClubeJogador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime?>("DtFimContrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtInicioContrato")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdClube")
                        .HasColumnType("bigint");

                    b.Property<long>("IdJogador")
                        .HasColumnType("bigint");

                    b.Property<double>("Salario")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("IdClube");

                    b.HasIndex("IdJogador");

                    b.ToTable("ClubeJogador", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.EstatisticaJogador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Amarelos")
                        .HasColumnType("int");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("Assistencias")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<int>("Gols")
                        .HasColumnType("int");

                    b.Property<long>("IdJogador")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTemporada")
                        .HasColumnType("bigint");

                    b.Property<int>("Partidas")
                        .HasColumnType("int");

                    b.Property<int>("Vermelhos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdJogador");

                    b.HasIndex("IdTemporada");

                    b.ToTable("EstatisticaJogador", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.EstatisticaJogadorClube", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Amarelos")
                        .HasColumnType("int");

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("Assistencias")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<int>("Gols")
                        .HasColumnType("int");

                    b.Property<long>("IdClube")
                        .HasColumnType("bigint");

                    b.Property<long>("IdJogador")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTemporada")
                        .HasColumnType("bigint");

                    b.Property<int>("Partidas")
                        .HasColumnType("int");

                    b.Property<int>("Vermelhos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClube");

                    b.HasIndex("IdJogador");

                    b.HasIndex("IdTemporada");

                    b.ToTable("EstatisticaJogadorClube", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.Jogador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Altura")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nacionalidade")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PePreferido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<string>("Posicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jogador", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.Temporada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Temporada", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.Transferencias", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<DateTime>("DtInicioContrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtPrevisaoFimContrato")
                        .HasColumnType("datetime2");

                    b.Property<string>("DtTransferencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<long>("IdClubeAnterior")
                        .HasColumnType("bigint");

                    b.Property<long>("IdClubeNovo")
                        .HasColumnType("bigint");

                    b.Property<long>("IdJogador")
                        .HasColumnType("bigint");

                    b.Property<long>("IdTemporada")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoTransferencia")
                        .HasColumnType("int");

                    b.Property<double>("VlTransferencia")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("IdClubeAnterior");

                    b.HasIndex("IdClubeNovo");

                    b.HasIndex("IdJogador");

                    b.HasIndex("IdTemporada");

                    b.ToTable("Transferencias", (string)null);
                });

            modelBuilder.Entity("CBF.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit")
                        .HasColumnName("Ativo");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("AtualizadoEm");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CriadoEm");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Permissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaCriptografa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NomeUsuario")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CBF.Domain.Entities.ClubeJogador", b =>
                {
                    b.HasOne("CBF.Domain.Entities.Clube", "Clube")
                        .WithMany("ClubesJogadores")
                        .HasForeignKey("IdClube")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Jogador", "Jogador")
                        .WithMany("Clubes")
                        .HasForeignKey("IdJogador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clube");

                    b.Navigation("Jogador");
                });

            modelBuilder.Entity("CBF.Domain.Entities.EstatisticaJogador", b =>
                {
                    b.HasOne("CBF.Domain.Entities.Jogador", "Jogador")
                        .WithMany("EstatisticasJogador")
                        .HasForeignKey("IdJogador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Temporada", "Temporada")
                        .WithMany()
                        .HasForeignKey("IdTemporada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("CBF.Domain.Entities.EstatisticaJogadorClube", b =>
                {
                    b.HasOne("CBF.Domain.Entities.Clube", "Clube")
                        .WithMany("EstatisticasJogadorClube")
                        .HasForeignKey("IdClube")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Jogador", "Jogador")
                        .WithMany("EstatisticasJogadorClube")
                        .HasForeignKey("IdJogador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Temporada", "Temporada")
                        .WithMany()
                        .HasForeignKey("IdTemporada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clube");

                    b.Navigation("Jogador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("CBF.Domain.Entities.Transferencias", b =>
                {
                    b.HasOne("CBF.Domain.Entities.Clube", "ClubeAnterior")
                        .WithMany("TransferenciasClubeAnterior")
                        .HasForeignKey("IdClubeAnterior")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Clube", "ClubeNovo")
                        .WithMany("TransferenciasClubeNovo")
                        .HasForeignKey("IdClubeNovo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Jogador", "Jogador")
                        .WithMany("Transferencias")
                        .HasForeignKey("IdJogador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CBF.Domain.Entities.Temporada", "Temporada")
                        .WithMany()
                        .HasForeignKey("IdTemporada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClubeAnterior");

                    b.Navigation("ClubeNovo");

                    b.Navigation("Jogador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("CBF.Domain.Entities.Clube", b =>
                {
                    b.Navigation("ClubesJogadores");

                    b.Navigation("EstatisticasJogadorClube");

                    b.Navigation("TransferenciasClubeAnterior");

                    b.Navigation("TransferenciasClubeNovo");
                });

            modelBuilder.Entity("CBF.Domain.Entities.Jogador", b =>
                {
                    b.Navigation("Clubes");

                    b.Navigation("EstatisticasJogador");

                    b.Navigation("EstatisticasJogadorClube");

                    b.Navigation("Transferencias");
                });
#pragma warning restore 612, 618
        }
    }
}
